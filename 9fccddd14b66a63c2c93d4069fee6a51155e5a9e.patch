diff --git a/kak-tree-sitter-config/src/lib.rs b/kak-tree-sitter-config/src/lib.rs
index 03ca041..cebbc4d 100644
--- a/kak-tree-sitter-config/src/lib.rs
+++ b/kak-tree-sitter-config/src/lib.rs
@@ -25,7 +25,7 @@ pub enum ConfigError {
 }
 
 impl ConfigError {
-  pub fn missing_opt(opt: impl Into<String>) -> Self {
+  fn missing_opt(opt: impl Into<String>) -> Self {
     Self::MissingOption { opt: opt.into() }
   }
 }
@@ -42,23 +42,10 @@ pub struct Config {
 }
 
 impl Config {
-  /// Load the configuration from a given path.
-  pub fn load(path: impl AsRef<Path>) -> Result<Self, ConfigError> {
-    let path = path.as_ref();
-    let content = fs::read_to_string(path).map_err(|err| ConfigError::CannotReadConfig {
-      path: path.to_owned(),
-      err,
-    })?;
-
-    toml::from_str(&content).map_err(|err| ConfigError::CannotParseConfig {
-      err: err.to_string(),
-    })
-  }
-
   /// Default configuration using the `default-config.toml` file.
   const DEFAULT_CONFIG_CONTENT: &'static str = include_str!("../../default-config.toml");
 
-  pub fn load_default_config() -> Result<Self, ConfigError> {
+  fn load_default_config() -> Result<Self, ConfigError> {
     log::debug!("loading default configuration");
 
     toml::from_str(Self::DEFAULT_CONFIG_CONTENT).map_err(|err| ConfigError::CannotParseConfig {
@@ -83,7 +70,7 @@ impl Config {
   }
 
   /// Merge the config with a user-provided one.
-  pub fn merge_user_config(&mut self, user_config: UserConfig) -> Result<(), ConfigError> {
+  fn merge_user_config(&mut self, user_config: UserConfig) -> Result<(), ConfigError> {
     if let Some(user_highlight) = user_config.highlight {
       self.highlight.merge_user_config(user_highlight);
     }
@@ -119,6 +106,26 @@ pub struct LanguagesConfig {
 }
 
 impl LanguagesConfig {
+  /// Get the directory with built-in grammars and queries relative to the binary.
+  fn get_builtin_dir() -> Option<PathBuf> {
+    std::env::current_exe()
+      .ok()?
+      .parent()?
+      .parent()
+      .map(|dir| dir.join("share/kak-tree-sitter"))
+  }
+
+  /// First, try to use `from_data_dir` if absent, use `builtin`.
+  fn fallback(from_data_dir: Option<PathBuf>, builtin: Option<PathBuf>) -> Option<PathBuf> {
+    match from_data_dir {
+      Some(path) => match path.try_exists() {
+        Ok(true) => Some(path),
+        Ok(false) | Err(_) => builtin,
+      },
+      None => builtin,
+    }
+  }
+
   fn merge_user_config(&mut self, user_config: UserLanguagesConfig) -> Result<(), ConfigError> {
     for (lang, user_config) in user_config.language {
       if let Some(config) = self.language.get_mut(&lang) {
@@ -140,21 +147,22 @@ impl LanguagesConfig {
     self.language.get(lang.as_ref())
   }
 
-  /// Get the directory where all grammars live in.
-  pub fn get_grammars_dir() -> Option<PathBuf> {
-    dirs::data_dir().map(|dir| dir.join("kak-tree-sitter/grammars"))
-  }
-
   /// Get the grammar path for a given language.
   pub fn get_grammar_path(lang: impl AsRef<str>) -> Option<PathBuf> {
     let lang = lang.as_ref();
-    dirs::data_dir().map(|dir| dir.join(format!("kak-tree-sitter/grammars/{lang}.so")))
+    let builtin = Self::get_builtin_dir().map(|dir| dir.join(format!("grammars/{lang}.so")));
+    let from_data_dir =
+      dirs::data_dir().map(|dir| dir.join(format!("kak-tree-sitter/grammars/{lang}.so")));
+    Self::fallback(from_data_dir, builtin)
   }
 
   /// Get the queries directory for a given language.
   pub fn get_queries_dir(lang: impl AsRef<str>) -> Option<PathBuf> {
     let lang = lang.as_ref();
-    dirs::data_dir().map(|dir| dir.join(format!("kak-tree-sitter/queries/{lang}")))
+    let builtin = Self::get_builtin_dir().map(|dir| dir.join(format!("queries/{lang}")));
+    let from_data_dir =
+      dirs::data_dir().map(|dir| dir.join(format!("kak-tree-sitter/queries/{lang}")));
+    Self::fallback(from_data_dir, builtin)
   }
 }
 
@@ -411,7 +419,7 @@ pub struct UserConfig {
 
 impl UserConfig {
   /// Load the config from the default user location (XDG).
-  pub fn load_from_xdg() -> Result<Self, ConfigError> {
+  fn load_from_xdg() -> Result<Self, ConfigError> {
     log::debug!("loading user configuration");
 
     let dir = dirs::config_dir().ok_or(ConfigError::NoConfigDir)?;
